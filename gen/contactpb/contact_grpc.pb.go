// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contactpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactServiceApiClient is the client API for ContactServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactServiceApiClient interface {
	Add(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	GetOne(ctx context.Context, in *GetOneContactRequest, opts ...grpc.CallOption) (*GetOneContactResponse, error)
	GetAll(ctx context.Context, in *GetOneContactRequest, opts ...grpc.CallOption) (ContactServiceApi_GetAllClient, error)
}

type contactServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceApiClient(cc grpc.ClientConnInterface) ContactServiceApiClient {
	return &contactServiceApiClient{cc}
}

func (c *contactServiceApiClient) Add(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, "/main.ContactServiceApi/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceApiClient) GetOne(ctx context.Context, in *GetOneContactRequest, opts ...grpc.CallOption) (*GetOneContactResponse, error) {
	out := new(GetOneContactResponse)
	err := c.cc.Invoke(ctx, "/main.ContactServiceApi/getOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceApiClient) GetAll(ctx context.Context, in *GetOneContactRequest, opts ...grpc.CallOption) (ContactServiceApi_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactServiceApi_ServiceDesc.Streams[0], "/main.ContactServiceApi/getAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &contactServiceApiGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactServiceApi_GetAllClient interface {
	Recv() (*GetOneContactResponse, error)
	grpc.ClientStream
}

type contactServiceApiGetAllClient struct {
	grpc.ClientStream
}

func (x *contactServiceApiGetAllClient) Recv() (*GetOneContactResponse, error) {
	m := new(GetOneContactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactServiceApiServer is the server API for ContactServiceApi service.
// All implementations must embed UnimplementedContactServiceApiServer
// for forward compatibility
type ContactServiceApiServer interface {
	Add(context.Context, *AddContactRequest) (*AddContactResponse, error)
	GetOne(context.Context, *GetOneContactRequest) (*GetOneContactResponse, error)
	GetAll(*GetOneContactRequest, ContactServiceApi_GetAllServer) error
	mustEmbedUnimplementedContactServiceApiServer()
}

// UnimplementedContactServiceApiServer must be embedded to have forward compatible implementations.
type UnimplementedContactServiceApiServer struct {
}

func (UnimplementedContactServiceApiServer) Add(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedContactServiceApiServer) GetOne(context.Context, *GetOneContactRequest) (*GetOneContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedContactServiceApiServer) GetAll(*GetOneContactRequest, ContactServiceApi_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedContactServiceApiServer) mustEmbedUnimplementedContactServiceApiServer() {}

// UnsafeContactServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactServiceApiServer will
// result in compilation errors.
type UnsafeContactServiceApiServer interface {
	mustEmbedUnimplementedContactServiceApiServer()
}

func RegisterContactServiceApiServer(s grpc.ServiceRegistrar, srv ContactServiceApiServer) {
	s.RegisterService(&ContactServiceApi_ServiceDesc, srv)
}

func _ContactServiceApi_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceApiServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ContactServiceApi/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceApiServer).Add(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactServiceApi_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceApiServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ContactServiceApi/getOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceApiServer).GetOne(ctx, req.(*GetOneContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactServiceApi_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOneContactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactServiceApiServer).GetAll(m, &contactServiceApiGetAllServer{stream})
}

type ContactServiceApi_GetAllServer interface {
	Send(*GetOneContactResponse) error
	grpc.ServerStream
}

type contactServiceApiGetAllServer struct {
	grpc.ServerStream
}

func (x *contactServiceApiGetAllServer) Send(m *GetOneContactResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ContactServiceApi_ServiceDesc is the grpc.ServiceDesc for ContactServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ContactServiceApi",
	HandlerType: (*ContactServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _ContactServiceApi_Add_Handler,
		},
		{
			MethodName: "getOne",
			Handler:    _ContactServiceApi_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAll",
			Handler:       _ContactServiceApi_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contact.proto",
}
